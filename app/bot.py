from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
from aiogram.utils.exceptions import InvalidQueryID
from aiogram.types import InputTextMessageContent, InlineQueryResultArticle, InlineKeyboardMarkup, InlineKeyboardButton
from database import  insert_image, get_latest_image, add_employee_to_db, update_employee_birth_date, get_employee_birth_date, get_employees_with_birthday_today
from database import delete_employee_and_related_data,has_reported_today, add_report, get_employee_id_by_telegram_id, get_unreported_employees,  clear_schedule_and_plans_for_employee, get_sales_plan_for_employee, get_tariff_plan_for_employee, add_sales_plan_to_db, delete_schedule_from_db, unbind_telegram_user_from_employee, add_employee_to_db, is_holiday,  get_employees_working_on_date, get_all_employees_from_db, get_employee_name_by_telegram_id, bind_user_to_employee, add_schedule_to_db, get_employee_id_by_name,get_schedule_from_db,  get_employee_name_by_user_id
import re
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode
import asyncio
import logging
import aiocron
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import notes_db
from aiogram.utils.callback_data import CallbackData
import logging


class NameInputState(StatesGroup):
    name_input = State()

from aiogram.dispatcher.filters.state import State, StatesGroup

class SchedulePreferencesState(StatesGroup):
    preferences = State()


class ScheduleState(StatesGroup):
    name_input = State()
    birth_date_input = State()

class PlanState(StatesGroup):
    waiting_for_date = State()
    waiting_for_sales_plan = State()
    waiting_for_tariff_plan = State()

class ReportState(StatesGroup):
    proposals = State()
    sales = State()

class ScheduleSetting(StatesGroup):
    choosing_schedule = State()
    adding_template = State()

class DeleteEmployeeState(StatesGroup):
    waiting_for_employee_name = State()

class ScheduleTemplate(StatesGroup):
    waiting_for_time = State()

class AddShiftTemplate(StatesGroup):
    waiting_for_template = State()

class Schedule(StatesGroup):
    choosing_schedule = State()

class TicketForm(StatesGroup):
    title = State()  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
    description = State()  # –û–ø–∏—Å–∞–Ω–∏–µ
    email = State()  # Email

class TicketForm(StatesGroup):
    title = State()
    description = State()
    email = State()

class ScheduleTemplateState(StatesGroup):
    choosing_days = State()
    confirming = State()

import random

birthday_messages = [
    "üéâ –° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è, {name}! –ñ–µ–ª–∞–µ–º —Ç–µ–±–µ –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ! üéÇ",
    "üéà –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {name}! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç –ø–æ–ª–æ–Ω —Ä–∞–¥–æ—Å—Ç–∏ –∏ —Å—á–∞—Å—Ç—å—è! üéÅ",
    "üç∞ –°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è, {name}! –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –∫–∞–∂–¥—ã–º –º–æ–º–µ–Ω—Ç–æ–º! ü•≥",
]


@aiocron.crontab('36 10 * * *')
async def send_birthday_notifications():
    logging.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è")
    employees = get_employees_with_birthday_today()
    logging.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è: {len(employees)}")
    if not employees:
        return  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    for name, username in employees:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
        message = random.choice(birthday_messages).format(name=name)
        mention = f"@{username}" if username else name

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
        await bot.send_message(chat_id=YOUR_GROUP_CHAT_ID, text=f"{mention}, {message}")



@aiocron.crontab('19 01 * * *')
async def send_notification():
    logging.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≥—Ä–∞—Ñ–∏–∫–µ —Ä–∞–±–æ—Ç—ã")
    tomorrow = datetime.now() + timedelta(days=1)
    day = tomorrow.strftime('%d')  # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ –¥–ª—è '–∑–∞–≤—Ç—Ä–∞'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ '–∑–∞–≤—Ç—Ä–∞' –≤—ã—Ö–æ–¥–Ω—ã–º –¥–Ω–µ–º
    if is_holiday(day):
        logging.info("–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ '–∑–∞–≤—Ç—Ä–∞'
    employees_working_tomorrow = get_employees_working_on_date(day)

    # –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    if not employees_working_tomorrow:
        logging.info("–ù–∞ –∑–∞–≤—Ç—Ä–∞ —Å–º–µ–Ω—ã –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    message_text = f"–†–∞–±–æ—Ç–∞—é—Ç –∑–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%Y-%m-%d')}): \n"
    message_text += "‚Äî " * 10 + "\n"
    for employee in employees_working_tomorrow:
        name = employee.get('name')
        username = employee.get('username')
        start_time = employee['start_time']
        end_time = employee['end_time']
        mention = f"{name} (@{username})" if username else name
        message_text += f"{mention}:\n   ‚åö –í—Ä–µ–º—è: —Å {start_time} –¥–æ {end_time}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    try:
        sent_message = await bot.send_message(chat_id=YOUR_GROUP_CHAT_ID, text=message_text)
        # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        await bot.pin_chat_message(chat_id=YOUR_GROUP_CHAT_ID, message_id=sent_message.message_id)
        logging.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")


from logging.handlers import RotatingFileHandler
YOUR_GROUP_CHAT_ID = -4002403152
YOUR_ADMIN_ID = 525026259
ADMIN_ID = 525026259
API_TOKEN = '6307162615:AAFQ5-2dwmLMVxiPbEuxc3i6PFXTJOpGH68'
days_of_week = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    filename='bot.log',
                    filemode='w', encoding='utf-8')


log_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
log_handler = RotatingFileHandler('bot.log', mode='a', maxBytes=5*1024*1024, backupCount=2, encoding='utf-8', delay=0)
log_handler.setFormatter(log_formatter)
log_handler.setLevel(logging.DEBUG)

logger = logging.getLogger('aiogram')
logger.setLevel(logging.DEBUG)
logger.addHandler(log_handler)



from datetime import datetime, timedelta
pagination_cb = CallbackData('page', 'action', 'page_num')
note_cb = CallbackData('note', 'note_id')

PAGE_SIZE = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
import calendar


def get_days_with_dates():
    today = datetime.now()
    first_day_of_month = today.replace(day=1)
    days_in_month = calendar.monthrange(today.year, today.month)[1]

    days_with_dates = []
    for day in range(days_in_month):
        date = first_day_of_month + timedelta(days=day)
        day_abbr = days_translation[date.strftime("%a").upper()]
        days_with_dates.append((day_abbr, date.strftime("%d")))

    return days_with_dates


days_translation = {
    "MON": "–ü–ù",
    "TUE": "–í–¢",
    "WED": "–°–†",
    "THU": "–ß–¢",
    "FRI": "–ü–¢",
    "SAT": "–°–ë",
    "SUN": "–í–°"
}


import asyncio
import aiomysql
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db_config = {
    'host': '127.0.0.1',
    'port': 3306,
    'user': 'root',
    'password': 'Erik456_debul.ua21',
    'db': 'crm',
}

from datetime import datetime, timedelta




class TicketForm(StatesGroup):
    title = State()
    description = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def insert_new_ticket(telegram_user_id, title, description):
    client_id = 3
    project_id = 0
    ticket_type_id = 1
    created_by = 5  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç –∏–º–µ–Ω–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞—é—Ç—Å—è —Ç–∏–∫–µ—Ç—ã
    requested_by = 5
    status = 'new'
    assigned_to = 1
    creator_name = 'Ernest Worker'
    creator_email = 'tawerkarespro18@gmail.com'
    labels = ''
    task_id = 0
    merged_with_ticket_id = 0
    deleted = 0

    async with aiomysql.connect(**db_config, charset='utf8mb4', autocommit=True) as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                INSERT INTO rise_tickets 
                (client_id, project_id, ticket_type_id, title, created_by, requested_by, created_at, 
                 status, last_activity_at, assigned_to, creator_name, creator_email, labels, 
                 task_id, closed_at, merged_with_ticket_id, deleted) 
                VALUES (%s, %s, %s, %s, %s, %s, NOW(), %s, NOW(), %s, %s, %s, %s, %s, %s, %s, %s)
                """, (client_id, project_id, ticket_type_id, title, created_by, requested_by,
                      status, assigned_to, creator_name, creator_email, labels, task_id,
                      '9999-12-31 23:59:59', merged_with_ticket_id, deleted))
            ticket_id = cur.lastrowid  # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ telegram_ticket_link
            await cur.execute("""
                INSERT INTO telegram_ticket_link (telegram_user_id, ticket_id) 
                VALUES (%s, %s)
                """, (telegram_user_id, ticket_id))
            logging.info(f"–¢–∏–∫–µ—Ç {ticket_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–≤—è–∑–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Telegram {telegram_user_id}.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
@dp.message_handler(commands=['new_ticket'])
async def new_ticket(message: types.Message):
    await TicketForm.title.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞:")

@dp.message_handler(state=TicketForm.title)
async def process_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['title'] = message.text
    await TicketForm.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞:")

@dp.message_handler(state=TicketForm.description)
async def process_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
    # –¢—É—Ç –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å telegram_user_id, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–∫:
    telegram_user_id = message.from_user.id
    await insert_new_ticket(telegram_user_id, data['title'], data['description'])
    await state.finish()
    await message.answer("–í–∞—à —Ç–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")




# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
last_sent_comment_id = {}

async def fetch_new_comments():
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç –∞–¥–º–∏–Ω–∞...")
    async with aiomysql.connect(**db_config) as conn:
        async with conn.cursor(aiomysql.DictCursor) as cur:
            await cur.execute("""
                SELECT rtc.id, rtc.description, rtc.ticket_id, ttl.telegram_user_id
                FROM rise_ticket_comments AS rtc
                JOIN rise_tickets AS rt ON rtc.ticket_id = rt.id
                JOIN telegram_ticket_link AS ttl ON rt.id = ttl.ticket_id
                WHERE rtc.created_by = 1 AND rtc.deleted = 0 AND rt.status != 'closed'
                ORDER BY rtc.id DESC
            """)
            comments = await cur.fetchall()
            for comment in comments:
                ticket_id = comment['ticket_id']
                if ticket_id not in last_sent_comment_id or comment['id'] > last_sent_comment_id[ticket_id]:
                    chat_id = comment['telegram_user_id']
                    if chat_id:
                        message = comment['description'].replace('<p>', '').replace('</p>', '\n').replace('<br>', '\n').strip()
                        await bot.send_message(chat_id, f"–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ '{ticket_id}': {message}")
                        last_sent_comment_id[ticket_id] = comment['id']
                    else:
                        logging.warning(f"Chat ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID {comment['telegram_user_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω.")





@dp.message_handler(commands=['add_comment'])
async def add_comment(message: types.Message):
    args = message.get_args().split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /add_comment <id_–∑–∞—è–≤–∫–∏> <–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π>")
        return

    ticket_id, comment_text = args[0], args[1]
    try:
        ticket_id = int(ticket_id)
    except ValueError:
        await message.reply("ID –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    sql_query = """
        INSERT INTO rise_ticket_comments (created_by, ticket_id, description, created_at, deleted, files, is_note)
        VALUES (%s, %s, %s, NOW(), 0, 'a:0:{}', 0)
    """
    sql_data = (5, ticket_id, comment_text)

    try:
        async with aiomysql.connect(**db_config, cursorclass=aiomysql.DictCursor) as conn:
            async with conn.cursor() as cur:
                await cur.execute("SELECT status FROM rise_tickets WHERE id = %s", (ticket_id,))
                ticket = await cur.fetchone()
                if ticket and ticket['status'] != 'closed':
                    await cur.execute(sql_query, sql_data)
                    await conn.commit()
                    await message.reply("–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ.")
                else:
                    await message.reply("–ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")








notified_closed_tickets = set()
async def check_ticket_closed():
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–æ–∫...")
    async with aiomysql.connect(**db_config) as conn:
        async with conn.cursor(aiomysql.DictCursor) as cur:
            await cur.execute("""
                SELECT rt.id, ttl.telegram_user_id
                FROM rise_tickets rt
                JOIN telegram_ticket_link ttl ON rt.id = ttl.ticket_id
                WHERE rt.status = 'closed'
            """)
            closed_tickets = await cur.fetchall()
            for ticket in closed_tickets:
                ticket_id = ticket['id']
                if ticket_id not in notified_closed_tickets:
                    telegram_user_id = ticket['telegram_user_id']
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Telegram –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞
                    await bot.send_message(telegram_user_id, f"–ó–∞—è–≤–∫–∞ {ticket_id} –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_user_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏ {ticket_id}.")

                    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –∏–∑ telegram_ticket_link
                    logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å —Ç–∏–∫–µ—Ç–∞ {ticket_id} –∏–∑ telegram_ticket_link...")
                    await cur.execute("""
                        DELETE FROM telegram_ticket_link
                        WHERE ticket_id = %s
                    """, (ticket_id,))
                    await conn.commit()
                    logging.info(f"–°–≤—è–∑—å —Ç–∏–∫–µ—Ç–∞ {ticket_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ telegram_ticket_link.")

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞—è–≤–∫–∏ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö
                    notified_closed_tickets.add(ticket_id)


import requests

def publish_telegraph_article(title, author_name, content, author_url=None):
    create_article_url = 'https://api.telegra.ph/createPage'
    token = 'YourTelegraphAccessToken'
    payload = {
        'access_token': '037bdafc612f5a8904da52815c4f1ff87504e692bd1c5ced0814c1b94281',
        'title': title,
        'content': content,
        'author_name': 'Kolomoyets',
        'author_url': 'https://t.me/yarmitt'
    }
    response = requests.post(create_article_url, json=payload)
    return response.json()


import json


class ArticleForm(StatesGroup):
    waiting_for_title = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
    waiting_for_content = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç–∞—Ç—å–∏

@dp.message_handler(commands=['savenote'], state='*')
async def start_saving_article(message: Message, state: FSMContext):
    await ArticleForm.waiting_for_title.set()
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:")

@dp.message_handler(state=ArticleForm.waiting_for_title)
async def article_title_received(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['title'] = message.text
    await ArticleForm.next()
    await message.reply("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏:")

@dp.message_handler(state=ArticleForm.waiting_for_content)
async def article_content_received(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['content'] = message.text
        title = data['title']
        content = json.dumps([{"tag": "p", "children": [data['content']]}])
        result = publish_telegraph_article(title, "Your Author Name", content)

        if result.get('ok'):
            article_url = result['result']['url']
            # –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ, URL –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            notes_db.save_article(message.from_user.id, title, article_url, data['content'])
            await message.reply(f"–°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –µ—ë –∑–¥–µ—Å—å: {article_url}")
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—å—é.")
    await state.finish()

@dp.message_handler(commands=['deletenote'])
async def delete_note_handler(message: types.Message):
    # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —á–∞—Å—Ç–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—å–∏
    parts = message.text.split(maxsplit=1)
    if len(parts) != 2 or not parts[1].isdigit():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /deletenote 123")
        return

    article_id = int(parts[1])
    # –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
    try:
        notes_db.delete_article_by_id(article_id)
        await message.reply(f"–°—Ç–∞—Ç—å—è —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {article_id} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")


@dp.message_handler(commands=['getnotes'])
async def get_notes_handler(message: types.Message, page_num: int = 1):
    articles, total_pages = notes_db.get_articles_page(page_num, 5)

    keyboard = InlineKeyboardMarkup(row_width=2)
    for article in articles:
        article_id, article_title, article_url = article[0], article[2], article[3]
        button_text = f"{article_title} (ID: {article_id})"
        keyboard.add(InlineKeyboardButton(text=button_text, url=article_url))

    pagination_buttons = []
    if page_num > 1:
        pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page_num-1}"))
    if page_num < total_pages:
        pagination_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page_{page_num+1}"))
    keyboard.row(*pagination_buttons)

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é:", reply_markup=keyboard)




@dp.callback_query_handler(note_cb.filter())
async def query_note(callback_query: types.CallbackQuery, callback_data: dict):
    note_id = int(callback_data['note_id'])
    note = notes_db.get_note_by_id(note_id)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f"–ó–∞–º–µ—Ç–∫–∞:\n{note[2]}")


@dp.callback_query_handler(pagination_cb.filter(action=['prev', 'next']))
async def query_page(callback_query: types.CallbackQuery, callback_data: dict):
    await get_notes_handler(callback_query.message, int(callback_data['page_num']))

@dp.message_handler(commands=['search'])
async def search_articles_handler(message: types.Message):
    query = message.get_args()
    page_num = 1
    articles, total_pages = notes_db.search_articles(query, page_num, PAGE_SIZE)

    if not articles:
        await message.reply("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —Å—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    keyboard = InlineKeyboardMarkup(row_width=1)
    for article in articles:
        title_preview = article[2][:30] + '...' if len(article[2]) > 30 else article[2]
        keyboard.add(InlineKeyboardButton(text=title_preview, url=article[3]))

    pagination_buttons = []
    if page_num > 1:
        pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"search_prev_{page_num-1}_{query}"))
    if page_num < total_pages:
        pagination_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"search_next_{page_num+1}_{query}"))
    if pagination_buttons:
        keyboard.row(*pagination_buttons)

    await message.reply("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏:", reply_markup=keyboard)





@dp.message_handler(lambda message: message.from_user.id == ADMIN_ID, commands=['admin'])
async def send_test(message: types.Message):
    await message.answer("–í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                         "/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n\n"
                         "/upload_schedule - –∑–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã\n\n"
                         "/view_schedule - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã\n\n"
                         "/remind (today/tomorrow)- –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n\n"
                         "/add_employee - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–∞\n\n"
                         "/delete_employee - delete —Ä–∞–±\n\n"
                         "/choose_employee - —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ–≤\n\n"
                         "/add_shift_template - –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–∞–±–æ–≤\n\n"
                         "/deletenote - —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—å—é(–Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∞–π–¥–∏, –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /getnotes)")

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("Hi, —è —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. –í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                         "/add_comment - –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–µ–Ω—Ç –∫ –∑–∞—è–≤–∫–µ\n\n"
                         "/new_ticket - –∑–∞—è–≤–∫–∞ —Ä–∞–∑—Ä–∞–±—É\n\n"
                         "/search - –ø–æ–∏—Å–∫ —Å—Ç–∞—Ç—å–∏\n\n"
                         "/getnotes - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç—å–∏\n\n"
                         "/savenote - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ –≤–≤–∏–¥–µ —Å—Ç–∞—Ç—å–∏\n\n"
                         "/view_schedule - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã\n\n"
                         "/unbind - –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∞–∫–∫ –¢–ì –∏ –†–∞–±–∞\n\n"
                         "/schedule - –ü—Ä–∏–≤—è–∑–∫–∞ –¢–ì –∞–∫–∫ –∫ —Å–≤–æ–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∞–º + –ø–æ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ–π –≥—Ä–∞—Ñ–∏–∫\n\n"
                         "/set_preferences - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã")


shift_options = {

}



@dp.message_handler(lambda message: message.from_user.id == ADMIN_ID, commands=['remind'])
async def remind_employees(message: types.Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ 'today' –∏–ª–∏ 'tomorrow' –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /remind")
        return

    command = parts[1]
    if command == "today":
        day = datetime.now().strftime('%d')
        remind_date_str = datetime.now().strftime('%Y-%m-%d')
    elif command == "tomorrow":
        day = (datetime.now() + timedelta(days=1)).strftime('%d')
        remind_date_str = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')  # –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞

    employees = get_employees_working_on_date(day)
    reminders = []

    for employee in employees:
        telegram_id = employee['telegram_id']
        reminder_text = (
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è @{employee['username'] or 'None'} ({employee['name']}) –Ω–∞ {remind_date_str} üîî\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"‚åö –í—Ä–µ–º—è: —Å {employee['start_time']} –¥–æ {employee['end_time']}\n"
            "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")

        reminders.append(reminder_text)
        if telegram_id:
            await bot.send_message(telegram_id, reminder_text)

    all_reminders_text = "\n\n".join(reminders)
    if all_reminders_text:
        group_chat_id = YOUR_GROUP_CHAT_ID
        await bot.send_message(group_chat_id, all_reminders_text)
    else:
        await message.reply("–ù–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é –¥–∞—Ç—É —Å–º–µ–Ω—ã –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.")

    await message.reply(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ {command} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")



from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


report_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
report_button = KeyboardButton("–ü–æ–¥–∞—Ç—å –æ—Ç—á–µ—Ç")
report_keyboard.add(report_button)

@dp.message_handler(lambda message: message.text == "–ü–æ–¥–∞—Ç—å –æ—Ç—á–µ—Ç")
async def report_start(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:", reply_markup=types.ReplyKeyboardRemove())
    await ReportState.proposals.set()

@dp.message_handler(lambda message: message.text.isdigit(), state=ReportState.proposals)
async def process_proposals(message: types.Message, state: FSMContext):
    proposals = int(message.text)
    await state.update_data(proposals=proposals)
    data = await state.get_data()  # Add this line
    print(f"Data after saving: {data}")  # Add this line
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂:")
    await ReportState.sales.set()


@dp.message_handler(lambda message: message.text.isdigit(), state=ReportState.sales)
async def process_sales(message: types.Message, state: FSMContext):
    data = await state.get_data()
    proposals = data.get("proposals")
    sales = int(message.text)

    print(f"Data before inserting: {data}")

    if proposals is None:
        print("Error: Proposals is None!")
        await message.answer("–û—à–∏–±–∫–∞: –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        await state.finish()
        return

    user_id = message.from_user.id
    employee_id = get_employee_id_by_telegram_id(user_id)

    if not has_reported_today(employee_id):
        add_report(employee_id, proposals, sales)
        await message.answer(f"–í—ã –ø–æ–¥–∞–ª–∏ –æ—Ç—á–µ—Ç! –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {proposals}, –ü—Ä–æ–¥–∞–∂: {sales}")
    else:
        await message.answer("–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –æ—Ç—á–µ—Ç —Å–µ–≥–æ–¥–Ω—è.")

    await state.finish()




@dp.message_handler(lambda message: message.text.startswith('/add_employee'), user_id=YOUR_ADMIN_ID)
async def add_employee(message: types.Message):
    print("Received command: /add_employee")
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("Name was not provided. Provide the name after the command.")
        return
    employee_name = ' '.join(parts[1:])
    print(f"Adding employee: {employee_name}")
    add_employee_to_db(employee_name)
    await message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")





@dp.message_handler(commands=['unbind'])
async def unbind_user(message: types.Message):
    user_id = message.from_user.id
    employee_name = get_employee_name_by_telegram_id(user_id)

    if not employee_name:
        await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
        return

    unbind_telegram_user_from_employee(user_id)
    await message.answer(f"–ü—Ä–∏–≤—è–∑–∫–∞ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ –∏–º–µ–Ω–∏ {employee_name} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")


@dp.message_handler(commands=['delete_employee'])
async def delete_employee_command(message: Message):
    if message.from_user.id == YOUR_ADMIN_ID:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
        await DeleteEmployeeState.waiting_for_employee_name.set()
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@dp.message_handler(state=DeleteEmployeeState.waiting_for_employee_name)
async def get_employee_name_to_delete(message: Message, state: FSMContext):
    employee_name = message.text
    delete_employee_and_related_data(employee_name)
    await message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee_name} –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
    await state.finish()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è


@dp.callback_query_handler(lambda call: call.data.startswith('employee'))
async def handle_employee_choice(call: types.CallbackQuery):
    if call.message is None:
        await call.answer("–ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    _, employee_name = call.data.split(":")
    employee_id = get_employee_id_by_name(employee_name)
    days_with_dates = get_days_with_dates()
    existing_schedule = get_schedule_from_db(employee_name)
    scheduled_days = [day.lstrip('0') for day, _, _ in existing_schedule]

    markup = InlineKeyboardMarkup()
    week_row = []
    for day_str, day_num in days_with_dates:
        button_text = f"{day_str} ({day_num})"
        if day_num.lstrip('0') in scheduled_days:
            button_text += " üìå"
        week_row.append(InlineKeyboardButton(button_text, callback_data=f"day:{employee_name}:{day_num}"))
        if len(week_row) == 3:
            markup.row(*week_row)
            week_row = []
    if week_row:
        markup.row(*week_row)

    markup.add(InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏ –ø–ª–∞–Ω—ã", callback_data=f"clear_schedule:{employee_name}"))
    markup.add(InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"finish:{employee_name}"))

    await bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è {employee_name}:",
        reply_markup=markup
    )



@dp.callback_query_handler(lambda call: call.data.startswith('clear_schedule:'))
async def handle_clear_schedule(call: types.CallbackQuery):
    _, employee_name = call.data.split(":")
    employee_id = get_employee_id_by_name(employee_name)
    clear_schedule_and_plans_for_employee(employee_id)
    await call.answer(f"–ì—Ä–∞—Ñ–∏–∫ –∏ –ø–ª–∞–Ω—ã –¥–ª—è {employee_name} –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã.")


@dp.callback_query_handler(lambda call: call.data.startswith('day'))
async def handle_day_choice(call: types.CallbackQuery):
    _, employee_name, day = call.data.split(":")
    markup = InlineKeyboardMarkup(row_width=1)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏, –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∏ –ø–ª–∞–Ω–∞
    markup.add(InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f"set_time:{employee_name}:{day}"))
    markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"employee:{employee_name}"))

    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è {employee_name} –≤ {day}:",
                                reply_markup=markup)


@dp.callback_query_handler(lambda call: call.data.startswith('set_time'))
async def choose_time_for_schedule(call: types.CallbackQuery):
    _, employee_name, day = call.data.split(":")
    markup = InlineKeyboardMarkup(row_width=1)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–º–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    shift_templates = database.get_shift_templates()
    shift_templates = sorted(shift_templates, key=lambda x: x[0] or '')

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω
    for i, (start, end) in enumerate(shift_templates, start=1):
        button_text = f"–°–º–µ–Ω–∞ {i} ({start or '‚Äî'} - {end or '‚Äî'})"
        button = InlineKeyboardButton(button_text,
                                      callback_data=f"time_selected;{employee_name};{day};{start or 'None'};{end or 'None'}")
        markup.add(button)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"day:{employee_name}:{day}"))

    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text=f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {employee_name} –Ω–∞ {day}:",
                                reply_markup=markup)




@dp.callback_query_handler(lambda call: call.data.startswith('time_selected'))
async def set_time_for_schedule(call: types.CallbackQuery):
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–∏–º–≤–æ–ª—É ";"
    data_parts = call.data.split(";")

    if len(data_parts) != 5:
        await bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    _, employee_name, day, start_time, end_time = data_parts

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–í—ã—Ö–æ–¥–Ω–æ–π", —Ç–æ –≤—Ä–µ–º—è –±—É–¥–µ—Ç None
    if start_time == "None":
        start_time = None
    if end_time == "None":
        end_time = None

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏
    employee_id = get_employee_id_by_name(employee_name)

    if employee_id is not None:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_schedule_to_db(employee_id, day, start_time, end_time)
        await bot.send_message(call.message.chat.id,
                               f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–ª—è {employee_name} –Ω–∞ {day}: —Å {start_time or '‚Äî'} –¥–æ {end_time or '‚Äî'}")
        call.data = f"employee:{employee_name}"
        await handle_employee_choice(call)

    else:
        await bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è {employee_name}")




@dp.callback_query_handler(lambda call: call.data.startswith('set_plan'))
async def handle_set_plan(call: types.CallbackQuery, state: FSMContext):
    _, employee_name, day = call.data.split(":")
    await PlanState.waiting_for_sales_plan.set()  # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø—Ä–æ–¥–∞–∂
    await state.update_data(employee_name=employee_name, plan_date=day)
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω –ø—Ä–æ–¥–∞–∂ –¥–ª—è {employee_name} –Ω–∞ {day}:")


@dp.message_handler(lambda message: message.text.isdigit(), state=PlanState.waiting_for_sales_plan)
async def handle_sales_plan(message: types.Message, state: FSMContext):
    sales_plan = int(message.text)
    await state.update_data(sales_plan=sales_plan)
    await PlanState.waiting_for_tariff_plan.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ç–∞—Ä–∏—Ñ–æ–≤:")

@dp.message_handler(lambda message: message.text.isdigit(), state=PlanState.waiting_for_tariff_plan)
async def handle_tariff_plan(message: types.Message, state: FSMContext):
    data = await state.get_data()
    sales_plan = data.get("sales_plan")
    tariff_plan = int(message.text)
    employee_name = data.get("employee_name")
    employee_id = get_employee_id_by_name(employee_name)
    day = data.get("plan_date") # –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ FSMContext
    add_sales_plan_to_db(employee_id, day, sales_plan, tariff_plan)
    await message.answer("–ü–ª–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
    await state.finish()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    call = types.CallbackQuery(data=f"employee:{employee_name}")
    await handle_employee_choice(call)

@dp.callback_query_handler(lambda call: call.data.startswith('finish'))
async def handle_finish(call: types.CallbackQuery):
    _, employee_name = call.data.split(":")
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text=f"–ì—Ä–∞—Ñ–∏–∫ –¥–ª—è {employee_name} —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    await choose_employee(call.message)

@dp.message_handler(lambda message: message.text.startswith('/choose_employee'), user_id=YOUR_ADMIN_ID)
async def choose_employee(message: types.Message):
    employees = get_all_employees_from_db()
    if not employees:
        await message.answer("–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")
        return
    markup = InlineKeyboardMarkup(row_width=1)
    for employee in employees:
        button = InlineKeyboardButton(employee, callback_data=f"employee:{employee}")
        markup.add(button)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=markup)


@dp.message_handler(commands=['upload_schedule'])
async def upload_schedule(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é.")

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_docs_photo(message: types.Message):
    file_id = message.photo[-1].file_id
    upload_date = datetime.now()

    insert_image(file_id, upload_date)
    await message.reply("–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")



@dp.message_handler(commands=['view_schedule'])
async def view_schedule(message: types.Message):
    file_id = get_latest_image()
    if file_id:
        await message.reply_photo(file_id[0])
    else:
        await message.answer("–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –ø–æ–∫–∞ –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω.")




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
def is_valid_date(date_str):
    try:
        datetime.strptime(date_str, '%Y-%m-%d')
        return True
    except ValueError:
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è birth_date_input
@dp.message_handler(state=ScheduleState.birth_date_input)
async def save_birth_date(message: types.Message, state: FSMContext):
    birth_date = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
    if not is_valid_date(birth_date):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–ì–ì–ì–ì-–ú–ú-–î–î).")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    user_id = message.from_user.id
    employee_name = get_employee_name_by_telegram_id(user_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_employee_birth_date(employee_name, birth_date)

    await message.reply(f"–î–ª—è {employee_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}")
    await state.finish()

@dp.message_handler(commands=['schedule'])
async def show_user_schedule(message: types.Message):
    user_id = message.from_user.id
    employee_name = get_employee_name_by_telegram_id(user_id)

    if not employee_name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:")
        await NameInputState.name_input.set()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    birth_date = get_employee_birth_date(employee_name)
    if not birth_date:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        await ScheduleState.birth_date_input.set()
        return

        # –ü–æ–∫–∞–∑ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã, –µ—Å–ª–∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    schedule = get_schedule_from_db(employee_name)
    if not schedule:
        await message.answer(f"–î–ª—è {employee_name} –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return

    days_with_dates = get_days_with_dates()
    response = f"–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –¥–ª—è {employee_name}:\n"
    for work_day, start_time, end_time in schedule:
        # –ù–∞–π–¥–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ —Å–ø–∏—Å–∫–µ days_with_dates
        day_date = next((d for d, day in days_with_dates if day == work_day), None)
        response += f"{work_day} ({day_date}): —Å {start_time} –¥–æ {end_time}\n"

    await message.answer(response)

@dp.message_handler(state=NameInputState.name_input)
async def handle_name_input(message: types.Message, state: FSMContext):
    print("handle_name_input triggered")
    user_id = message.from_user.id
    username = message.from_user.username
    employee_name = message.text

    employees_from_db = get_all_employees_from_db()
    print(f"Employees from DB: {employees_from_db}")

    for name in employees_from_db:
        print(f"Comparing '{employee_name}' with '{name}'")
        if name.lower() == employee_name.lower():
            print("Names are identical!")
            bind_user_to_employee(user_id, employee_name, username)
            await message.answer(f"–í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è ({employee_name}) –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /schedule, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–∞—à –≥—Ä–∞—Ñ–∏–∫.")
            await state.finish()
            return

    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


from datetime import datetime, timedelta, time
import logging
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.DEBUG)



from aiogram.dispatcher.filters import Command
import database


@dp.message_handler(Command('add_shift_template'), state='*')
async def start_adding_shift_template(message: types.Message):
    await ScheduleSetting.adding_template.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Å–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'HH:MM-HH:MM'")


@dp.message_handler(state=ScheduleSetting.adding_template)
async def add_shift_template(message: types.Message, state: FSMContext):
    try:
        start_time, end_time = message.text.split('-')
        database.add_shift_template(start_time, end_time)
        await message.answer("–®–∞–±–ª–æ–Ω —Å–º–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.")
        print(e)
    finally:
        await state.finish()



@dp.message_handler(Command('set_schedule'), state='*')
async def start_setting_schedule(message: types.Message):
    await ScheduleSetting.choosing_schedule.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É:", reply_markup=await get_schedule_keyboard())


async def get_schedule_keyboard():
    markup = InlineKeyboardMarkup(row_width=1)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–º–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    templates = database.get_shift_templates()
    for template in templates:
        shift_name, start, end = template[1], template[2], template[3]
        button_text = f"{shift_name} ({start or '‚Äî'} - {end or '‚Äî'})"
        button = InlineKeyboardButton(button_text, callback_data=f"schedule:{shift_name}")
        markup.add(button)

    return markup

@dp.message_handler(Command('set_preferences'), state='*')
async def start_setting_preferences(message: types.Message):
    await SchedulePreferencesState.preferences.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –≥—Ä–∞—Ñ–∏–∫—É —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–î–µ–Ω—å (–ß–∏—Å–ª–æ): —Å HH:MM –¥–æ HH:MM', –Ω–∞–ø—Ä–∏–º–µ—Ä '–ü–ù (06): —Å 13:00 –¥–æ 21:00'. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ /done.")

@dp.message_handler(state=SchedulePreferencesState.preferences)
async def set_preferences(message: types.Message, state: FSMContext):
    preferences_text = message.text
    user_id = message.from_user.id

    async with state.proxy() as data:
        if 'preferences' not in data:
            data['preferences'] = []

        if message.text.lower() == '/done':
            await message.answer("–í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –≥—Ä–∞—Ñ–∏–∫—É —Ä–∞–±–æ—Ç—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            admin_user_id = '525026259'
            preferences_message = "\n".join(data['preferences'])
            await bot.send_message(admin_user_id, f"–ü–æ–∂–µ–ª–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n{preferences_message}")


            await state.finish()
        else:
            data['preferences'].append(preferences_text)
            await message.answer("–ü–æ–∂–µ–ª–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞.")


async def periodic_task(interval, task_func, *args):
    while True:
        try:
            await task_func(*args)  # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_func.__name__}: {e}")
        await asyncio.sleep(interval)  # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è


async def on_startup(dp):
    await bot.send_message(ADMIN_ID, "Bot has been started")
    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    asyncio.create_task(periodic_task(10, fetch_new_comments))
    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    asyncio.create_task(periodic_task(10, check_ticket_closed))



if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, on_startup=on_startup)